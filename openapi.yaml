openapi: 3.0.3
info:
  title: LiquipediaDB API
  version: 3.0.0
servers:
  - url: 'https://api.liquipedia.net/api/v3'
tags:
  - name: v3
    description: Endpoints of the v3 API
    externalDocs:
      description: 'For the full documentation, see'
      url: 'https://api.liquipedia.net/documentation/api/v3'
paths:
  /broadcasters:
    get:
      summary: Get broadcasters
      description: Get information from the broadcasters table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /company:
    get:
      summary: Get companies
      description: Get information from the company table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /datapoint:
    get:
      summary: Get datapoints
      description: >-
        Get information from the datapoint table. This information is
        unspecified between wikis and can hold a variety of things.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /externalmedialink:
    get:
      summary: Get media links
      description: Get information from the externalmedialink table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /match:
    get:
      summary: Get matches
      description: Get information from the match2 table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
        - name: rawstreams
          in: query
          description: >-
            If you want the raw stream data. Read the full documentation on how
            this correlates with `streamurls`.


            **Example:** `true`, `false`
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
            default: 'false'
        - name: streamurls
          in: query
          description: >-
            If you want to get stream urls to link to. Read the full
            documentation on how this correlates with `rawstreams`.


            **Example:** `true`, `false`
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
            default: 'false'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /placement:
    get:
      summary: Get placements
      description: Get information from the placement table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /player:
    get:
      summary: Get players
      description: Get information from the player table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /series:
    get:
      summary: Get series
      description: Get information from the series table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /squadplayer:
    get:
      summary: Get squadplayer
      description: Get information from the squadplayer table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /standingsentry:
    get:
      summary: Get standing
      description: Get information from the standing entries table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /standingstable:
    get:
      summary: Get standing
      description: Get information from the standing table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /team:
    get:
      summary: Get teams
      description: Get information from the team table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /teamtemplate:
    get:
      summary: Get a team template
      description: Use this to get a single team template.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - name: wiki
          in: query
          description: |-
            The wiki you want data from.

            **Example:** `dota2`
          schema:
            type: string
          required: true
        - name: template
          in: query
          description: |-
            The template name of the team template you want to get.

            **Example:** `teamliquid`
          schema:
            type: string
          required: true
        - name: date
          in: query
          description: >-
            Liquipedia supports historical logos, but will require the date to
            show them.


            **Example:** `2009-06-05`
          schema:
            type: string
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /teamtemplatelist:
    get:
      summary: Get a list of team templates
      description: Use this to query a list of team templates in pages of 200.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - name: wiki
          in: query
          description: |-
            The wiki you want data from.

            **Example:** `dota2`
          schema:
            type: string
          required: true
        - name: pagination
          in: query
          description: |-
            .

            **Example:** `1`
          schema:
            type: integer
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /tournament:
    get:
      summary: Get tournaments
      description: Get information from the tournament table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /transfer:
    get:
      summary: Get transfers
      description: Get information from the transfer table.
      tags:
        - v3
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/wiki'
        - $ref: '#/components/parameters/conditions'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/groupby'
      responses:
        '200':
          description: Successful call
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successfulResponse'
                  - $ref: '#/components/schemas/successfulResponseWithWarning'
        '403':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Asking for data that does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: Over API limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: authorization
      description: |-
        Your API key.

        **Example:** `Apikey ThisIsALongStringThatIsOurExampleApiKey`
  parameters:
    wiki:
      name: wiki
      in: query
      description: >-
        The wikis you want data from. Pipe-separate multiple wikis for multiwiki
        requests.


        **Example:** `dota2`, `dota2|counterstrike`
      schema:
        type: string
      required: true
    conditions:
      name: conditions
      in: query
      description: |-
        The filters you want to apply to the request.

        **Example:** `[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]`
      schema:
        type: string
    query:
      name: query
      in: query
      description: |-
        The datapoints you want to query.

        **Example:** `pagename, pageid, namespace`
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: |-
        The amount of results you want.

        **Example:** `20`
      schema:
        type: integer
    offset:
      name: offset
      in: query
      description: |-
        This can be used for pagination.

        **Example:** `20`
      schema:
        type: integer
    order:
      name: order
      in: query
      description: |-
        The order you want your result in.

        **Example:** `pagename ASC`
      schema:
        type: string
    groupby:
      name: groupby
      in: query
      description: >-
        What you want your results grouped by (this can be helpful when using
        aggregate functions).


        **Example:** `pagename ASC`
      schema:
        type: string
  schemas:
    successfulResponse:
      title: Successful call
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            items:
              type: string
    successfulResponseWithWarning:
      title: Successful call with warning
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            items:
              type: string
        warning:
          type: array
          items:
            type: string
    error:
      title: Error
      type: object
      properties:
        error:
          type: array
          items:
            type: string
